#include "Common.ush"

#define GROUP_TILE_SIZE     64
#define SMALL_NUMBER		1.e-8f

//[Output]
RWBuffer<uint> ClearUAV;
[numthreads(GROUP_TILE_SIZE, 1, 1)]
void ClearComputeFieldCS(uint DispatchThreadId : SV_DispatchThreadID)
{
    ClearUAV[DispatchThreadId] = 0;
}

struct ClusterInputData
{   
    uint FirstRenderIndex;
    uint LodBufferStartIndex;
    uint ClusterInstanceCountAndLodCount;
    uint InstanceBufferStartIndex;  
    
    float3 BoundCenter; //Because the Vec3 start address of gles must be aligned to 16 bytes
    float CullDistance; //Aligned to 16 bytes
    
    float3 BoundExtent;
    float ScaledBoundSphereRadius;
};

struct ClusterOutputData
{
    uint FirstRenderIndex;
    uint LodBufferStartIndex;
    uint ClusterInstanceCountAndLodIndex; //Compressed to 16 bytes
    uint InstanceBufferStartIndexAddLodCount; //Compressed to 16 bytes
};

//[input]
uint TotalClusterCount_Pass_0;
float3 ViewOriginPosition;
float4 ViewFrustumPermutedPlanes[8]; 
float2 ProjMatrixXY;
float4x4 LastFrameViewProjectMatrix;

Texture2D<float> HzbResource;
StructuredBuffer<ClusterInputData> InputClusterBufferSRV;
Buffer<float> LodDataBuffre; 

//[output]
RWStructuredBuffer<ClusterOutputData> OutputClusterBufferUAV;
RWBuffer<uint> EntityLodCountBufferUAV;


uint GetClusterLod(in float3 BoundMin, in float3 BoundMax, in uint MeshLodCount, in uint LodBufferStartIndex, in float ScaledBoundSphereRadius, in float CullDis)
{
    float3 Center = (BoundMin + BoundMax) * 0.5f;
    float BoundHalfExtent = distance(BoundMin, BoundMax) * 0.5f;
    float ViewToCenterDis = distance(Center, ViewOriginPosition);
    float FarDistance = ViewToCenterDis - BoundHalfExtent;
    // Get projection multiple accounting for view scaling.
    float ScreenMultiple = max(0.5f * ProjMatrixXY.x, 0.5f * ProjMatrixXY.y);
    
    uint CurLod = MeshLodCount - 1;

    LOOP
    for (int Index = MeshLodCount - 1; Index > 0; --Index)
    {
        uint CurLodBufferIndex = LodBufferStartIndex + Index;

        float ScreenSize = LodDataBuffre[CurLodBufferIndex];
 
        // ScreenSize is the projected diameter, so halve it
        float ScreenRadius = max(SMALL_NUMBER, ScreenSize * 0.5f);
        float DrawDistance = (ScreenMultiple * ScaledBoundSphereRadius) * rcp(ScreenRadius);
        float FinalDis = min(DrawDistance, CullDis);
        
        if (FarDistance < FinalDis)
        {
            CurLod -= 1;
        }
        else
        {
            break;
        }
    }
   
    return CurLod;
}

bool DistanceCulling(in float3 BoundMin, in float3 BoundMax, in float CullDistance)
{
    float3 Center = (BoundMin + BoundMax) * 0.5f;
    float BoundHalfExtent = distance(BoundMin, BoundMax) * 0.5f;
    float ViewToCenterDis = distance(Center, ViewOriginPosition);
    float NearDistance = ViewToCenterDis - BoundHalfExtent;
    
    if (NearDistance > CullDistance)
    {
        return false;
    }
    
   return true;
}

bool IntersectBox8Plane(in float3 Center, in float3 Extent, out bool InsideNearPlane)
{
    float4 DistX_0 = Center.xxxx * ViewFrustumPermutedPlanes[0];
    float4 DistY_0 = Center.yyyy * ViewFrustumPermutedPlanes[1] + DistX_0;
    float4 DistZ_0 = Center.zzzz * ViewFrustumPermutedPlanes[2] + DistY_0;
    float4 Distance_0 = DistZ_0 - ViewFrustumPermutedPlanes[3];
    
    float4 PushX_0 = Extent.xxxx * abs(ViewFrustumPermutedPlanes[0]);
    float4 PushY_0 = Extent.yyyy * abs(ViewFrustumPermutedPlanes[1]) + PushX_0;
    float4 PushOut_0 = Extent.zzzz * abs(ViewFrustumPermutedPlanes[2]) + PushY_0;

    if (any(Distance_0 > PushOut_0))
    {
        return false;
    }

    //是否完全在进平面内部
    InsideNearPlane = Distance_0.x < -PushOut_0.x;
    
    float4 DistX_1 = Center.xxxx * ViewFrustumPermutedPlanes[4];
    float4 DistY_1 = Center.yyyy * ViewFrustumPermutedPlanes[5] + DistX_1;
    float4 DistZ_1 = Center.zzzz * ViewFrustumPermutedPlanes[6] + DistY_1;
    float4 Distance_1 = DistZ_1 - ViewFrustumPermutedPlanes[7];
    
    float4 PushX_1 = Extent.xxxx * abs(ViewFrustumPermutedPlanes[4]);
    float4 PushY_1 = Extent.yyyy * abs(ViewFrustumPermutedPlanes[5]) + PushX_1;
    float4 PushOut_1 = Extent.zzzz * abs(ViewFrustumPermutedPlanes[6]) + PushY_1;
    
    if (any(Distance_1 > PushOut_1))
    {
        return false;
    }
    
    
    return true;
}

bool HzbTest(in float3 BoundMin, in float3 BoundMax)
{
//  Divide by 0 produces +/- INF, except 0/0 which results in NaN.
//  log of (+/-) 0 produces -INF. log of a negative value (other than -0) produces NaN.
//  Reciprocal square root (rsq) or square root (sqrt) of a negative number produces NaN. The exception is -0; sqrt(-0) produces -0, and rsq(-0) produces -INF.
//  INF - INF = NaN
//  (+/-)INF / (+/-)INF = NaN
//  (+/-)INF * 0 = NaN
//  NaN (any OP) any-value = NaN
//  The comparisons EQ, GT, GE, LT, and LE, when either or both operands is NaN returns FALSE.
//  Comparisons ignore the sign of 0 (so +0 equals -0).
//  The comparison NE, when either or both operands is NaN returns TRUE.
//  Comparisons of any non-NaN value against +/- INF return the correct result.
    
    float3 Bounds[2] = { BoundMin, BoundMax };
    
    // Screen rect from bounds
    float3 RectMin = float3(1, 1, 1);
    float3 RectMax = float3(-1, -1, 0); //UE默认矩阵Z为0~1 
    UNROLL
    for (int i = 0; i < 8; i++)
    {
        float3 PointSrc;
        PointSrc.x = Bounds[(i >> 0) & 1].x;
        PointSrc.y = Bounds[(i >> 1) & 1].y;
        PointSrc.z = Bounds[(i >> 2) & 1].z;

        float4 PointClip = mul(float4(PointSrc, 1), LastFrameViewProjectMatrix);
        float3 PointScreen = PointClip.xyz / PointClip.w;

        RectMin = min(RectMin, PointScreen);
        RectMax = max(RectMax, PointScreen);
    }
    
    float4 Rect = saturate(float4(RectMin.xy, RectMax.xy) * float2(0.5, -0.5).xyxy + 0.5).xwzy; //超出屏幕外时不应该使用saturate,无法计算正确的大小
    float4 RectPixels = Rect * float4(256.f, 128.f, 256.f, 128.f);
    float2 RectSize = (RectPixels.zw - RectPixels.xy) * 0.5; // + 0.001
    float Level = min(max(ceil(log2(max(RectSize.x, RectSize.y))), 0.f), 7.f);
    uint SampleLevel = uint(Level);
    
    //https://docs.microsoft.com/en-us/windows/win32/direct3d9/nearest-point-sampling
    //纹理下标应当映射到[-0.5, n - 0.5]
    float4 SamplePosition = Rect * float4(256.f, 128.f, 256.f, 128.f) - 0.5f; 
    SamplePosition = max(SamplePosition, float4(0.f, 0.f, 0.f, 0.f));
    SamplePosition = min(SamplePosition, float4(255.f, 127.f, 255.f, 127.f));
    uint4 MaxSamplePos = round(SamplePosition);
    uint4 CurSamplePos = MaxSamplePos >> SampleLevel;
    uint2 CenterSamplePos = (MaxSamplePos.xy + MaxSamplePos.zw) >> (SampleLevel + 1);
    
    
    //float4 MinDepth = 1;
    //uint2 Scale = (CurSamplePos.zw - CurSamplePos.xy) / 3;
    //uint2 Bias = CurSamplePos.xy;
    
    //UNROLL
    //for (int i = 0; i < 4; i++)
    //{
    //    float4 Depth;
    //    Depth.x = HzbResource.Load(int3(int2(i, 0) * Scale + Bias, SampleLevel));
    //    Depth.y = HzbResource.Load(int3(int2(i, 1) * Scale + Bias, SampleLevel));
    //    Depth.z = HzbResource.Load(int3(int2(i, 2) * Scale + Bias, SampleLevel));
    //    Depth.w = HzbResource.Load(int3(int2(i, 3) * Scale + Bias, SampleLevel));
    //    MinDepth = min(MinDepth, Depth);
    //}
    
    //MinDepth.x = min(min(MinDepth.x, MinDepth.y), min(MinDepth.z, MinDepth.w));
    
    float4 Depth;
    Depth.x = HzbResource.Load(int3(CurSamplePos.xy, SampleLevel));
    Depth.y = HzbResource.Load(int3(CurSamplePos.zw, SampleLevel));
    Depth.z = HzbResource.Load(int3(CurSamplePos.x, CurSamplePos.w, SampleLevel));
    Depth.w = HzbResource.Load(int3(CurSamplePos.z, CurSamplePos.y, SampleLevel));
    float CenterDepth = HzbResource.Load(int3(CenterSamplePos.xy, SampleLevel));
    
    float2 Depth_0 = min(Depth.xy, Depth.zw);
    float Depth_1 = min(Depth_0.x, Depth_0.y);
    float Depth_2 = min(Depth_1, CenterDepth);
    
    if (RectMax.z < Depth_2.x)
    {
        return false;
    }

    return true;
}

[numthreads(GROUP_TILE_SIZE, 1, 1)]
void MobileGpuCulling(uint DispatchThreadId : SV_DispatchThreadID)
{
    if (DispatchThreadId < TotalClusterCount_Pass_0)
    {
        ClusterOutputData OutputRenderData = (ClusterOutputData) 0;
        ClusterInputData RenderData = InputClusterBufferSRV[DispatchThreadId];
    
        //Distance Culling
        float3 BoundsMin = RenderData.BoundCenter.xyz - RenderData.BoundExtent.xyz;
        float3 BoundsMax = RenderData.BoundCenter.xyz + RenderData.BoundExtent.xyz;
        bool bIsDistanceVisible = DistanceCulling(BoundsMin, BoundsMax, RenderData.CullDistance);
        if (!bIsDistanceVisible)
        {
            OutputClusterBufferUAV[DispatchThreadId] = OutputRenderData;
            return;
        }
        
        bool InsideNearPlane;
        bool bIsFrustumVisible = IntersectBox8Plane(RenderData.BoundCenter, RenderData.BoundExtent, InsideNearPlane);
        if (!bIsFrustumVisible)
        {
            OutputClusterBufferUAV[DispatchThreadId] = OutputRenderData;
            return;
        }

        //Hiz Culling
        bool bIsOcclusionVisible;
        BRANCH
        if (InsideNearPlane)
        {
            bIsOcclusionVisible = HzbTest(BoundsMin, BoundsMax);
        }
        else
        {
            bIsOcclusionVisible = true;
        }
       
        if (!bIsOcclusionVisible)
        {
            OutputClusterBufferUAV[DispatchThreadId] = OutputRenderData;
            return;
        }

        //CalcLod
        uint MeshCount = RenderData.ClusterInstanceCountAndLodCount >> 16;
        uint ClusterInstanceCount = RenderData.ClusterInstanceCountAndLodCount & 0xFFFF;
        uint CurLodIndex = GetClusterLod(BoundsMin, BoundsMax, MeshCount, RenderData.LodBufferStartIndex, RenderData.ScaledBoundSphereRadius, RenderData.CullDistance);
        uint LodCountBufferIndex = RenderData.LodBufferStartIndex + CurLodIndex;
        uint CurLodCount = 0;
        InterlockedAdd(EntityLodCountBufferUAV[LodCountBufferIndex], ClusterInstanceCount, CurLodCount);
        
        //Write Cluster Data
        OutputRenderData.FirstRenderIndex = RenderData.FirstRenderIndex;
        OutputRenderData.LodBufferStartIndex = RenderData.LodBufferStartIndex;
        OutputRenderData.ClusterInstanceCountAndLodIndex = ClusterInstanceCount | (CurLodIndex << 16);
        OutputRenderData.InstanceBufferStartIndexAddLodCount = RenderData.InstanceBufferStartIndex + CurLodCount;
        OutputClusterBufferUAV[DispatchThreadId] = OutputRenderData;
    }
}

//[Input]
uint TotalClusterCount_Pass_1;
StructuredBuffer<ClusterOutputData> OutputClusterBufferSRV;
Buffer<uint> LodCountBufferSRV_0;

//[Output]
//RWStructuredBuffer<uint> InstanceToRenderIndexBufferUAV;
RWBuffer<uint> InstanceToRenderIndexBufferUAV;

[numthreads(GROUP_TILE_SIZE, 1, 1)]
void MobileUpdateInstanceIndexBuffer(uint DispatchThreadId : SV_DispatchThreadID)
{
    if (DispatchThreadId < TotalClusterCount_Pass_1)
    {
        ClusterOutputData RenderData = OutputClusterBufferSRV[DispatchThreadId];
        uint ClusterInstanceCount = (RenderData.ClusterInstanceCountAndLodIndex & 0xFFFF);
        if (ClusterInstanceCount == 0)
        {
            return;
        }
    
        uint PreLodCount = 0;
        uint CurLodIndex = (RenderData.ClusterInstanceCountAndLodIndex >> 16);
        uint CurLodBufferIndex = RenderData.LodBufferStartIndex + CurLodIndex;
    
        LOOP
        for (uint StartLodIndex = RenderData.LodBufferStartIndex; StartLodIndex < CurLodBufferIndex; ++StartLodIndex)
        {
            PreLodCount += LodCountBufferSRV_0[StartLodIndex];
        }
    
        uint CurInstanceBufferStartIndex = RenderData.InstanceBufferStartIndexAddLodCount + PreLodCount;
        LOOP
        for (uint RenderIndex = 0; RenderIndex < ClusterInstanceCount; ++RenderIndex)
        {
            InstanceToRenderIndexBufferUAV[CurInstanceBufferStartIndex + RenderIndex] = RenderData.FirstRenderIndex + RenderIndex;
        }
    }   
}

//[Input]
uint TotalDrawCount_Pass_2;
Buffer<uint2> IndirectDrawToLodIndexBufferSRV;
Buffer<uint> LodCountBufferSRV_1;

//[Output]
RWBuffer<uint> IndirectDrawCommandBufferUAV;
RWBuffer<uint> FirstInstanceIndexBufferUAV;

[numthreads(GROUP_TILE_SIZE, 1, 1)]
void MobileIndirectDrawUpdate(uint DispatchThreadId : SV_DispatchThreadID)
{
    if (DispatchThreadId < TotalDrawCount_Pass_2)
    {
        uint IndirectDrawInstanceCountIndex = DispatchThreadId * 5 + 1; //InstanceCount
        uint2 LodBufferIndexAndLodIndex = IndirectDrawToLodIndexBufferSRV[DispatchThreadId];
    
        uint FirstInstanceIndex = 0;
        
        LOOP
        for (uint i = 1; i <= LodBufferIndexAndLodIndex.y; ++i)
        {
            FirstInstanceIndex += LodCountBufferSRV_1[LodBufferIndexAndLodIndex.x - i];
        }
    
        IndirectDrawCommandBufferUAV[IndirectDrawInstanceCountIndex] = LodCountBufferSRV_1[LodBufferIndexAndLodIndex.x];
        FirstInstanceIndexBufferUAV[DispatchThreadId] = FirstInstanceIndex;
    }
}


