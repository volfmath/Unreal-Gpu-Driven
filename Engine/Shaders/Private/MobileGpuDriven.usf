#include "Common.ush"

#define GROUP_TILE_SIZE 64

//[Output]
RWBuffer<uint> ClearUAV;
[numthreads(GROUP_TILE_SIZE, 1, 1)]
void ClearComputeFieldCS(uint DispatchThreadId : SV_DispatchThreadID)
{
    ClearUAV[DispatchThreadId] = 0;
}

struct ClusterInputData
{   
    uint FirstRenderIndex;
    uint LodBufferStartIndex;
    uint ClusterInstanceCount;
    uint InstanceBufferStartIndex;  
    uint MeshLodCount;
    float3 BoundCenter; 
    float3 BoundExtent;
};

struct ClusterOutputData
{
    uint FirstRenderIndex;
    uint LodBufferStartIndex;
    uint ClusterInstanceCountAndLodIndex; //压缩到16字节
    uint InstanceBufferStartIndexAddLodCount; //压缩到16字节
};

//[input]
uint TotalClusterCount;
float4 ViewFrustumPermutedPlanes[8]; 
float4x4 LastFrameViewProjectMatrix;

Texture2D<float> HzbResource;
StructuredBuffer<ClusterInputData> InputClusterBufferSRV;
Buffer<float> LodDataBuffre; 

//[output]
RWStructuredBuffer<ClusterOutputData> OutputClusterBufferUAV;
RWBuffer<uint> EntityLodCountBufferUAV;

uint GetClusterLod()
{
    //ISM不计算LOD, 这样能够与原生效果相同
    //HISM计算方式与原生相同
    return 0;
}

bool IntersectBox8Plane(in float3 Center, in float3 Extent)
{
    float4 DistX_0 = Center.xxxx * ViewFrustumPermutedPlanes[0];
    float4 DistY_0 = Center.yyyy * ViewFrustumPermutedPlanes[1] + DistX_0;
    float4 DistZ_0 = Center.zzzz * ViewFrustumPermutedPlanes[2] + DistY_0;
    float4 Distance_0 = DistZ_0 - ViewFrustumPermutedPlanes[3];
    
    float4 PushX_0 = Extent.xxxx * abs(ViewFrustumPermutedPlanes[0]);
    float4 PushY_0 = Extent.yyyy * abs(ViewFrustumPermutedPlanes[1]) + PushX_0;
    float4 PushOut_0 = Extent.zzzz * abs(ViewFrustumPermutedPlanes[2]) + PushY_0;

    if (any(Distance_0 > PushOut_0))
    {
        return false;
    }

    float4 DistX_1 = Center.xxxx * ViewFrustumPermutedPlanes[4];
    float4 DistY_1 = Center.yyyy * ViewFrustumPermutedPlanes[5] + DistX_1;
    float4 DistZ_1 = Center.zzzz * ViewFrustumPermutedPlanes[6] + DistY_1;
    float4 Distance_1 = DistZ_1 - ViewFrustumPermutedPlanes[7];
    
    float4 PushX_1 = Extent.xxxx * abs(ViewFrustumPermutedPlanes[4]);
    float4 PushY_1 = Extent.yyyy * abs(ViewFrustumPermutedPlanes[5]) + PushX_1;
    float4 PushOut_1 = Extent.zzzz * abs(ViewFrustumPermutedPlanes[6]) + PushY_1;
    
    if (any(Distance_1 > PushOut_1))
    {
        return false;
    }
    
    return true;
}

bool HzbTest(in float3 Center, in float3 Extent)
{
//  Divide by 0 produces +/- INF, except 0/0 which results in NaN.
//  log of (+/-) 0 produces -INF. log of a negative value (other than -0) produces NaN.
//  Reciprocal square root (rsq) or square root (sqrt) of a negative number produces NaN. The exception is -0; sqrt(-0) produces -0, and rsq(-0) produces -INF.
//  INF - INF = NaN
//  (+/-)INF / (+/-)INF = NaN
//  (+/-)INF * 0 = NaN
//  NaN (any OP) any-value = NaN
//  The comparisons EQ, GT, GE, LT, and LE, when either or both operands is NaN returns FALSE.
//  Comparisons ignore the sign of 0 (so +0 equals -0).
//  The comparison NE, when either or both operands is NaN returns TRUE.
//  Comparisons of any non-NaN value against +/- INF return the correct result.
    
    float3 BoundsMin = Center.xyz - Extent.xyz;
    float3 BoundsMax = Center.xyz + Extent.xyz;
    float3 Bounds[2] = { BoundsMin, BoundsMax };
    
    // Screen rect from bounds
    float3 RectMin = float3(1, 1, 1);
    float3 RectMax = float3(-1, -1, 0); //UE默认矩阵Z为0~1 
    UNROLL
    for (int i = 0; i < 8; i++)
    {
        float3 PointSrc;
        PointSrc.x = Bounds[(i >> 0) & 1].x;
        PointSrc.y = Bounds[(i >> 1) & 1].y;
        PointSrc.z = Bounds[(i >> 2) & 1].z;

        float4 PointClip = mul(float4(PointSrc, 1), LastFrameViewProjectMatrix);
        float3 PointScreen = PointClip.xyz / PointClip.w;

        RectMin = min(RectMin, PointScreen);
        RectMax = max(RectMax, PointScreen);
    }
    
    float4 Rect = saturate(float4(RectMin.xy, RectMax.xy) * float2(0.5, -0.5).xyxy + 0.5).xwzy; //超出屏幕外时不应该使用saturate,无法计算正确的大小
    float4 RectPixels = Rect * float4(256.f, 128.f, 256.f, 128.f);
    float2 RectSize = (RectPixels.zw - RectPixels.xy) * 0.5; // + 0.001
    float Level = min(max(ceil(log2(max(RectSize.x, RectSize.y))), 0.f), 7.f);
    uint SampleLevel = uint(Level);
    
    //https://docs.microsoft.com/en-us/windows/win32/direct3d9/nearest-point-sampling
    //纹理下标应当映射到[-0.5, n - 0.5]
    float4 SamplePosition = Rect * float4(256.f, 128.f, 256.f, 128.f) - 0.5f; 
    SamplePosition = max(SamplePosition, float4(0.f, 0.f, 0.f, 0.f));
    SamplePosition = min(SamplePosition, float4(255.f, 127.f, 255.f, 127.f));
    uint4 MaxSamplePos = round(SamplePosition);
    uint4 CurSamplePos = MaxSamplePos >> SampleLevel;
    uint2 CenterSamplePos = (MaxSamplePos.xy + MaxSamplePos.zw) >> (SampleLevel + 1);
    
    float4 Depth;
    Depth.x = HzbResource.Load(int3(CurSamplePos.xy, SampleLevel));
    Depth.y = HzbResource.Load(int3(CurSamplePos.zw, SampleLevel));
    Depth.z = HzbResource.Load(int3(CurSamplePos.x, CurSamplePos.w, SampleLevel));
    Depth.w = HzbResource.Load(int3(CurSamplePos.z, CurSamplePos.y, SampleLevel));
    float CenterDepth = HzbResource.Load(int3(CenterSamplePos.xy, SampleLevel));
    
    float2 Depth_0 = min(Depth.xy, Depth.zw);
    float Depth_1 = min(Depth_0.x, Depth_0.y);
    float Depth_2 = min(Depth_1, CenterDepth);
    
    if (RectMax.z < Depth_2)
    {
        return false;
    }

    return true;
}

[numthreads(GROUP_TILE_SIZE, 1, 1)]
void MobileGpuCulling(uint DispatchThreadId : SV_DispatchThreadID)
{
    ClusterOutputData OutputRenderData = (ClusterOutputData)0;
    if (DispatchThreadId < TotalClusterCount)
    {
        //每次直接读16个字节,FrustumCulling需要读取两次
        ClusterInputData RenderData = InputClusterBufferSRV[DispatchThreadId];
    
        bool bIsFrustumVisible = IntersectBox8Plane(RenderData.BoundCenter, RenderData.BoundExtent);
        if (!bIsFrustumVisible)
        {
            OutputClusterBufferUAV[DispatchThreadId] = OutputRenderData;
            return;
        }

        //Hiz Culling
        bool bIsOcclusionVisible = HzbTest(RenderData.BoundCenter, RenderData.BoundExtent);
        if (!bIsOcclusionVisible)
        {
            OutputClusterBufferUAV[DispatchThreadId] = OutputRenderData;
            return;
        }

        //CalcLod
        uint CurLodIndex = GetClusterLod();
        uint LodCountBufferIndex = RenderData.LodBufferStartIndex + CurLodIndex;
        uint CurLodCount = 0;
        InterlockedAdd(EntityLodCountBufferUAV[LodCountBufferIndex], RenderData.ClusterInstanceCount, CurLodCount);
        
        //Write Cluster Data
        OutputRenderData.FirstRenderIndex = RenderData.FirstRenderIndex;
        OutputRenderData.LodBufferStartIndex = RenderData.LodBufferStartIndex;
        OutputRenderData.ClusterInstanceCountAndLodIndex = RenderData.ClusterInstanceCount | (CurLodIndex << 16);
        OutputRenderData.InstanceBufferStartIndexAddLodCount = RenderData.InstanceBufferStartIndex + CurLodCount;
    }
    OutputClusterBufferUAV[DispatchThreadId] = OutputRenderData;
}

//[Input]
StructuredBuffer<ClusterOutputData> OutputClusterBufferSRV;
Buffer<uint> LodCountBufferSRV_0;

//[Output]
RWStructuredBuffer<uint> InstanceToRenderIndexBufferUAV;

[numthreads(GROUP_TILE_SIZE, 1, 1)]
void MobileUpdateInstanceIndexBuffer(uint DispatchThreadId : SV_DispatchThreadID)
{
    ClusterOutputData RenderData = OutputClusterBufferSRV[DispatchThreadId];
    uint ClusterInstanceCount = (RenderData.ClusterInstanceCountAndLodIndex & 0xFFFF);
    if (ClusterInstanceCount == 0)
    {
        return;
    }
    
    uint PreLodCount = 0;
    uint CurLodIndex = (RenderData.ClusterInstanceCountAndLodIndex >> 16);
    uint CurLodBufferIndex = RenderData.LodBufferStartIndex + CurLodIndex;
    
    LOOP
    for (uint StartLodIndex = RenderData.LodBufferStartIndex; StartLodIndex < CurLodBufferIndex; ++StartLodIndex)
    {
        PreLodCount += LodCountBufferSRV_0[StartLodIndex];
    }
    
    uint CurInstanceBufferStartIndex = RenderData.InstanceBufferStartIndexAddLodCount + PreLodCount;
    LOOP
    for (uint RenderIndex = 0; RenderIndex < ClusterInstanceCount; ++RenderIndex)
    {
        InstanceToRenderIndexBufferUAV[CurInstanceBufferStartIndex + RenderIndex] = RenderData.FirstRenderIndex + RenderIndex;
    }     
}



//[Input]
Buffer<uint> IndirectDrawToLodIndexBufferSRV;
Buffer<uint> LodCountBufferSRV_1;

//[Output]
RWBuffer<uint> IndirectDrawCommandBufferUAV;

[numthreads(GROUP_TILE_SIZE, 1, 1)]
void MobileIndirectDrawUpdate(uint DispatchThreadId : SV_DispatchThreadID)
{
    uint IndirectDrawBufferIndex = DispatchThreadId * 5 + 1;
    uint EntityLodCountBufferIndex = IndirectDrawToLodIndexBufferSRV[DispatchThreadId];
    IndirectDrawCommandBufferUAV[IndirectDrawBufferIndex] = LodCountBufferSRV_1[EntityLodCountBufferIndex];
}


